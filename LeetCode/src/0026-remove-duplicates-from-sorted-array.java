//0026-删除排序数组中的重复项
//思路：双指针



//双指针：1ms，击败99.98%的用户
/*
    双指针具体操作：
    - 数组完成排序后，放置两个指针 i 和 j，其中 i 是慢指针，而 j 是快指针。
      - i，j是数组索引值
      - 注：j负责遍历整个数组（循环），i负责控制新数组的长度（返回值）
    - 只要 nums[i] = nums[j]，就增加 j 以跳过重复项（j是快指针）；
      - 仅j增加，没有其他操作，可作为循环体中if判断的不成立情况，这时，每次循环仅j自增
    - 当 nums[j] != nums[i] 时，跳过重复项的运行已经结束；
      - 这种情况下，有后续操作，可作为循环体中if判断成立的情况，并把后续操作放在if语句中
    - 把 nums[j] 的值复制到 nums[i + 1]；
    - 然后递增 i，再次重复相同的过程，直到 j 到达数组的末尾为止。
    - 遍历结束后返回慢指针 i+1
*/
class Solution {
    public int removeDuplicates(int[] nums) {
        //首先判空
        if(nums.length == 0)
            return 0;
        
        //在循环外定义慢指针i
        int i = 0;

        //在循环体内定义快指针j，遍历直到数组末尾
        for(int j=0; j<nums.length; j++){
            //当进行操作时，再进入if判断语句，否则仅j自增
            if(nums[i] != nums[j]){
                i++;
                nums[i] = nums[j];
            }
        }

        //返回：参考控制新数组的i
        return i+1;
    }
}