//0009-回文数
/*
思路：
- 回文数即反转之后与原数字相等的数字；
- 为防止溢出，可只反转一半数字；
- 考虑不符合条件的数字：所有负数 and 个位为0但不是0的数字
- 考虑循环判停条件：当剩余x不再大于反转数字rev时
- 考虑返回值：奇数位数的数字与偶数位数的数字
*/



class Solution {
    public boolean isPalindrome(int x) {
        //所有负数都不是回文数
        //个位数为0且不为0的数字都不是回文数：个位为0，最高位也应为0，符合的只有0
        if(x<0 || (x % 10 == 0 && x != 0))
            return false;

        //定义变量保存反转后的数字
        int rev = 0;

        //循环，直到剩余数字不再大于反转数字时，循环停止
        //注：x=0是相等的情况，这时不需要进行循环，直接进行下一步判断，因此不包含等于
        while(x>rev){
            //反转：因为后续没用到pop，因此这里直接写为x%10
            rev = rev * 10 + x % 10;
            x /= 10;
        }

        //返回值需要考虑奇数位数的数字和偶数位数的数字两种
        //判停条件下，奇数位数字，rev的最后一位将是原数字最中间的一位，可用rev/10将最后一位削去
        return x == rev || x == rev/10;
    }
}