//65 - 不用加减乘除做加法
//关键：发现规律--不进位加法对应异或，进位对应与运算+左移1位，
//循环跳出条件为当两数其一为0（官方说法是进位为0），即把循环中的第一个数看作不进位加法，第二个数看作与运算左移



/*

- 算法：
    - 不进位相加：0+0,1+1得0,而1+0,0+1得1，这与“异或”运算的结果相同，即不同时得1，反之得0.
    - 进位：0+0,1+0,0+1都不进位，只有1+1进位，这与“与运算”的结果相同，且进位在高一位，因此左移1位；
    - 将第一步的“不进位相加”结果与第二步的“进位并左移”结果相加：相加又可以调用本体函数，构成循环；
    - 重复，直到不产生进位：只有存在进位时，才需要继续做加法；若没有进位，则循环停止。
    - 然而事实是：循环停止的条件是，当两个数中有一个数变为0时，返回另一个数
  - 关键要找到这个规律
    - 两个数异或：相当于每一位相加，而不考虑进位；
    - 两个数相与，并左移一位：相当于求得进位；
    - 将上述两步的结果相加，相加则递归
    
*/
public class Solution {
    public int Add(int num1,int num2) {
	// 找准判停条件是关键
        return (num2==0) ? num1 : Add(num1^num2, (num1&num2)<<1);
    }
}
