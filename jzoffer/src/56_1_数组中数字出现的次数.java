//56.1 - 数组中数字出现的次数
//思路：异或+分组+异或



//耗时：2ms，击败95.73%的用户
/*
  - 算法：
    - 定义变量k用于存储异或结果，并初始化为0；
      - 注：0与任何数异或，结果为该任意数。
    - 遍历数组，并将所有数字异或，结果存入k；
    - 获取k的最低位1：
      - 定义flag=1；
      - while循环，当flag与k的&结果为0时，左移一位flag；
    - 定义结果数组a和b，并初始化为0；
    - for循环遍历数组：
      - if判断遍历到的每个元素，按照`该元素&flag`结果是否为0进行分组进行，并分别与a和b进行异或运算。
    - 返回new的数组并将结果数字a和b存入该数组。  
  - 注意：
    - 不确定运算符的优先级时，多加括号来区分优先级。
*/
class Solution {
    public int[] singleNumbers(int[] nums) {
        //定义所有数字异或的结果遍历k
        int k = 0;
        for(int i : nums){
            k ^= i;
        }

        //获取k中二进制位中为1的最低位：定义flag+左移
        int flag = 1;
        while((flag & k) == 0)
            flag <<= 1;

        //定义结果变量，并初始化为0
        int a = 0, b = 0;

        //再次遍历数组：根据最低位是否为0进行分组
        for(int i : nums){
            if((i & flag) == 0)
                a ^= i;
            else 
                b ^= i;
        }

        //将所得结果存入新建的数组并返回
        return new int[]{a,b};
    }
}
